数据交互：
1、表单			最基本、最简单   http数据请求其实都是表单
2、ajax			不用刷新页面（局部刷新） 降低流量 可以跨域；（缺点：重复提交）
3、jsonp			古老跨域；安全性差；
4、WebSocket		快、双向、跨域

ajax			性能低、单向、跨域麻烦
websocket	性能高、双向（双工） 、支持跨域

场景：服务端推送，ajax就是轮询，websocket就能直接推送

--------------------------------------------------------------------------------------------------------

跨域：
www.baidu.com/a.html     ->  www.360.cn/1.txt

xss 跨站脚本攻击


必须：
1、360buy.com、jd.com   ;   sina.cn、weibo.com
2、第三方数据

1、表单
2、ajax-麻烦
3、jsonp-简单、有风险
4、ws
      可以兼容到IE6
--------------------------------------------------------------------------------------------------------

1、http协议
2、原生JS
--------------------------------------------------------------------------------------------------------

安全性：
1、系统安全性
2、代码安全性---蠢

--------------------------------------------------------------------------------------------------------
http协议

http    ：容易被攻击
https   ：security 安全

http1.0   一次性连接
http1.1   保持连接 性能提升
http2.0（草案）
1、强制https
2、自带双向通信
3、多路复用

协议：
RFC  （一系列以编号排定的文件）
Request For Comments（RFC），是一系列以编号排定的文件。文件收集了有关互联网相关信息，以及UNIX和互联网社区的软件文件。目前RFC文件是由Internet Society（ISOC）赞助发行。基本的互联网通信协议都有在RFC文件内详细说明。RFC文件还额外加入许多的论题在标准内，例如对于互联网新开发的协议及发展中所有的记录。因此几乎所有的互联网标准都有收录在RFC文件之中。

rfc HTTP https://tools.ietf.org/html/rfc2616

三次握手

http消息（头、体） X开头的都是 扩展



OSI（Open System Interconnection） 七层交换“参考”模型
1、物理层    物理学家、通信工程 --- 材料 电压
2、链路层     内网寻址    ARP、ICMP
3、网络层     外网寻址    IP
4、传输层      通信稳定性  TCP UDP
5、表现层	×统一各个网络结构
6、会话层	×记录状态
7、应用层	应用细节  http、ftp、smtp、pop3


五层模型：物理层、链路层、网络层、传输层、应用层（表现层、会话层、应用层）

TCP   传输控制协议     保证到达、保证质量、保证顺序   | 文件下载  聊天
1、丢失重传
2、错误重发
3、保证顺序

UDP  用户数据报协议   不保证到达、不保证质量、不保证顺序
对质量没有绝对要求、对延迟有很高的要求  IP电话  视频直播


--------------------------------------------------------------------------------------------------------
无状态通信：

同源异构系统

对于服务器来说，区分不出来到底是form还是ajax还是jsonp

表单：
1、属性
action  提交到哪儿
method   方式   GET、POST ；  PUT HEADER DELETE  ；自定义
name     必须加，参数名字  可以重复
submit按钮  提交



2、数据提交方法（区别）
GET  数据放在url里面
1、容量有限
2、看得见（表单）
3、有缓存
4、利于分享、收藏

POST  数据放在 http-body里面
1、容量很大
2、看不见
3、不缓存
4、没法分享、收藏

GET\POST 安全性 完全一样；https才是真安全

3、校验



ajax：
1、浏览器
2、服务器

表单---稳定  浏览器实现
ajax--- js实现，用户体验好

表单重复提交怎么处理？
1、开始提交禁用 提交按钮，结束后（无论成功失败） 启用；


ajax内部怎么写的 ：
异步--并行
同步--串行

on ready state change 当通信状态变化
当  准备  状态  改变

0	初始化--刚刚创建
1	已连接
2	已发送
3	已接受-头
4	已接受-body

xhr.status 状态码
http状态码：数字
1××	消息
2××  成功
3××  重定向
301 永久重定向		浏览器永远不会再次请求老的地址
302 临时重定向		浏览器下载还会请求老的地址
304 缓存				客户端再次请求资源，如果自己有缓存，服务器会根据last-modified时间是否返回新的内容 或者 304
4××  客户端错误
5××  服务器错误
6××  扩展

xhr.responseText  文本
xhr.responseXML  XML数据

xml -> html

xml被json基本取代

1、原生ajax怎么写   ----  xhr对象
2、哪些步骤
3、通信状态-- 0~4
4、通信结果-- http状态码


==============================
ajax完成---封装、缓存（？）、post
jsonp
ajax跨域    CORS跨域
formData  ---  Ajax 2.0


WebSocket、Nodejs

重定向   给浏览器下命令，让浏览器去请求另一个地址---地址变的
转发  在服务器内部，把请求转交给另一个模块处理；对客户端是不可见的----地址不变